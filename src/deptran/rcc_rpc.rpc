namespace janus;

abstract service MultiPaxos {

  defer Forward(MarshallDeputy cmd);

  defer Prepare(uint64_t slot,
                ballot_t ballot |
                ballot_t max_ballot);

  defer Accept(uint64_t slot,
               ballot_t ballot,
               MarshallDeputy cmd |
               ballot_t max_ballot);

  defer Decide(uint64_t slot,
               ballot_t ballot,
               MarshallDeputy cmd);
}

// below is for 2PL and OCC
abstract service Classic {
  defer MsgString(string arg | string ret);

  defer MsgMarshall(MarshallDeputy arg | MarshallDeputy ret);

//  defer Dispatch(vector<SimpleCommand> cmd |
//                 i32 res,
//                 TxnOutput output);

  defer Dispatch(uint32_t coo_id, i64 tid, MarshallDeputy cmd |
                 i32 res, TxnOutput output);

  defer Prepare(i64 tid, 
                vector<i32> sids | 
                i32 res);

  defer Commit(i64 tid | i32 res);

  defer Abort(i64 tid | i32 res);

  defer UpgradeEpoch(uint32_t curr_epoch |
                     int32_t res)

  defer TruncateEpoch(uint32_t old_epoch)

  // input: contains many pieces, each piece consist of
  // | <i32 p_type> <i64 pid> <i32 input_size> <i32 max_output_size> 
  // <input_0> <input_1> ... |
  // output: contains many pieces, each piece consist of
  // | <i32 res> <i32 output_size> <output_0> <output_1> ... |
  // below is for what?

  defer rpc_null( | );
  //  defer Prepare();
  defer TapirAccept(uint64_t cmd_id,
                    int64_t ballot,
	                int32_t decision);
  // works as 2PC prepare on a paxos fast-accept
  defer TapirFastAccept(uint64_t cmd_id,
                        vector<SimpleCommand> txn_cmds |
                        i32 res);
  // works as a 2PC commit/abort with a paxos decision
  defer TapirDecide(uint64_t cmd_id, i32 commit);

  defer RccDispatch(vector<SimpleCommand> cmd |
                    i32 res,
                    TxnOutput output,
                    MarshallDeputy md_graph);

  defer RccFinish(cmdid_t id,
                  MarshallDeputy md_graph |
                  map<uint32_t, map<int32_t, Value>> outputs);

  // defer RccInquire(epoch_t epoch,
  //                  txnid_t txn_id |
  //                  MarshallDeputy md_res_graph);

  defer RccInquire(txnid_t txn_id, int32_t rank |
                   map<uint64_t, parent_set_t>);

  defer RccDispatchRo(SimpleCommand cmd |
                      map<i32, Value> output);

  defer RccInquireValidation(txid_t tx_id, int32_t rank | int32_t res);

  defer RccNotifyGlobalValidation(txid_t tx_id, int32_t rank, int32_t res |);

  defer JanusDispatch(vector<SimpleCommand> cmd |
                      i32 res,
                      TxnOutput output,
                      MarshallDeputy ret_graph);

  defer RccCommit(cmdid_t id,
                  rank_t rank,
                  int32_t need_validation,
                  parent_set_t  parents |
                  int32_t res,
                  TxnOutput output);

  defer JanusCommit(cmdid_t id,
                    rank_t rank,
                    int32_t need_validation,
                    MarshallDeputy graph |
                    int32_t res,
                    TxnOutput output);

  defer JanusCommitWoGraph(cmdid_t id,
                           rank_t rank,
                           int32_t need_validation |
                           int32_t res,
                           TxnOutput output);

  defer JanusInquire(epoch_t epoch, 
                     txnid_t txn_id |
                     MarshallDeputy ret_graph);

  defer RccPreAccept(cmdid_t txn_id,
                     rank_t rank,
                     vector<SimpleCommand> cmd |
                     i32 res,
                     parent_set_t x );

  defer JanusPreAccept(cmdid_t txn_id,
                       rank_t rank,
                       vector<SimpleCommand> cmd,
                       MarshallDeputy graph |
                       i32 res,
                       MarshallDeputy ret_graph);

  defer JanusPreAcceptWoGraph(cmdid_t txn_id,
                              rank_t rank,
                              vector<SimpleCommand> cmd |
                              i32 res,
                              MarshallDeputy ret_graph);

  defer RccAccept(cmdid_t txn_id,
                  i32 rank,
                  ballot_t ballot,
                  parent_set_t p  |
                  i32 res);

  defer JanusAccept(cmdid_t txn_id,
                    i32 rank,
                    ballot_t ballot,
                    MarshallDeputy graph |
                    i32 res);

  defer PreAcceptFebruus(txid_t tx_id |
                         i32 ret,
                         uint64_t timestamp);

  defer AcceptFebruus(txid_t tx_id,
                      ballot_t ballot,
                      uint64_t timestamp |
                      i32 ret);

  defer CommitFebruus(txid_t tx_id, uint64_t timestamp | i32 ret);

  // RPCs for ACCESS
  defer AccDispatch(uint32_t coo_id, i64 tid, MarshallDeputy cmd, uint64_t ssid_spec, uint8_t is_single_shard_write_only, uint32_t coord, unordered_set<uint32_t> cohorts |
                    i32 res, uint64_t ssid_low, uint64_t ssid_high, uint64_t ssid_new, TxnOutput output, uint64_t arrival_time);

  defer AccValidate(i64 tid, uint64_t ssid_new | int8_t res);

  defer AccFinalize(i64 tid, int8_t decision |);

  defer AccStatusQuery(i64 tid | int8_t res);
}


// Below is for statistics

struct ValueTimesPair {
    i64 value;
    i64 times;
}

struct TxnInfoRes {
    i32 start_txn;  // total number of started txns
    i32 total_txn;  // total number of finished txns
    i32 total_try;  // total number of tries finished
    i32 commit_txn; // number of commit transactions
    i32 num_exhausted; // number of txns that reached the retry limit
    vector<double> this_latency; // latencies started && finish in this period
    vector<double> last_latency; // latencies started in last period, finish in this period
    vector<double> attempt_latency; // interval latencies for each attempts
    vector<double> interval_latency; // latencies finish in this period
    vector<double> all_interval_latency; // latencies finish in this period include txn's with exhausted retries
    vector<i32> num_try;
}

struct ServerResponse {
    map<string, ValueTimesPair> statistics;
    double cpu_util;
    i64 r_cnt_sum;
    i64 r_cnt_num;
    i64 r_sz_sum;
    i64 r_sz_num;
}

struct ClientResponse  {
    map<i32, TxnInfoRes> txn_info; // statistics for each txn
    i64 run_sec;    // running time in seconds
    i64 run_nsec;   // running time in nano seconds
    i64 period_sec;    // running time in seconds
    i64 period_nsec;   // running time in nano seconds
    i32 is_finish;  // if client finishs
    i64 n_asking;   // asking finish request count
}

abstract service ServerControl {
    defer server_shutdown ( | );
    defer server_ready ( | i32 res);
    defer server_heart_beat_with_data ( | ServerResponse res);
    defer server_heart_beat ( | );
}

struct TxDispatchRequest {
    i32 id;
    i32 tx_type;
    vector<Value> input;
}

struct TxnDispatchResponse {
}

abstract service ClientControl {
    defer client_get_txn_names( | map<i32, string> txn_names);
    defer client_shutdown ( | );
    defer client_force_stop ( | );
    defer client_response ( | ClientResponse res);
    defer client_ready ( | i32 res);
    defer client_ready_block ( | i32 res);
    defer client_start ( | );
    defer DispatchTxn(TxDispatchRequest req | TxReply result);
}
